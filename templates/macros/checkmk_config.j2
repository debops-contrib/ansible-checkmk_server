{#
 # The tmpl_set_config() macro will iterate through the given list of config
 # dictionaries and generate the Check_MK configuration values if they belong
 # to the given file name.
 #}

{% macro tmpl_set_config(_tmpl_file, _wato, _config) %}
{%   for _entry in _config %}
{%     if 'filename' in _entry %}
{%       set _cfg_file = _entry.filename %}
{%     else %}
{%       set _cfg_file = checkmk_server__variable_map[_entry.name|d("undefined name")].filename %}
{%     endif %}
{%     if (_cfg_file == _tmpl_file) and (_entry.wato|d(True) == _wato|bool) %}
{%       set _state = 'present' %}
{%       if 'rule_state' in _entry %}
{%         set _state = _entry.rule_state %}
{%       endif %}
{%       if _state == 'present' %}
{{         tmpl_var_define(_entry) }}{%
         endif %}
{%     endif %}
{%   endfor %}
{% endmacro %}


{#
 # The tpl_var_define() macro will call the appropriate variable formatting
 # macro for the given configuration entry.
 #}

{% macro tmpl_var_define(_cfg_entry) %}
{#
 #   Fail if name property is not set
 #}
{%   set _name = _cfg_entry.name %}
{%   if 'element' in _cfg_entry %}
{%     set _element = _cfg_entry.element %}
{%   endif %}
{#
 #   Set empty value if none was given. Leave to the macros how to deal with
 #   this
 #}
{%   set _value = _cfg_entry.value|d("") %}
{%   if 'tags' in _cfg_entry %}
{#
 #     Tags are formatted as a list with a trailing comma
 #}
{%     set _tags = "['" + _cfg_entry.tags | join("', '") + "', ]" %}
{%   else %}
{%     set _tags = "[]" %}
{%   endif %}
{%   if 'hosts' in _cfg_entry %}
{#
 #     Host list entries mustn't be formatted as unicode strings
 #}
{%     if (_cfg_entry.hosts is iterable) and (_cfg_entry.hosts | length > 0) %}
{%       set _formatted_hosts = "['" + _cfg_entry.hosts | join("', '") + "']" %}
{%     endif %}
{%   endif %}
{%   if _formatted_hosts is defined %}
{%     set _hosts = _formatted_hosts %}
{%   else %}
{%     set _hosts = _cfg_entry.hosts|d("ALL_HOSTS") %}
{%   endif %}
{%   set _conditions = _cfg_entry.conditions|d([]) %}
{#
 #   Search if template association can be found and fallback to 'custom'
 #}
{%   if 'template' in _cfg_entry %}
{%     set _template = _cfg_entry.template %}
{%   elif checkmk_server__variable_map[_cfg_entry.name].template|d() %}
{%     set _template = checkmk_server__variable_map[_cfg_entry.name].template %}
{%   else %}
{%     set _template = 'custom' %}
{%   endif %}
{#
 #   Call jinja macro according to _template value
 #}
{%   if _template == 'key_value' %}
{{     tmpl_var__key_value(_name, _value) }}{%
     elif _template == 'dict_update' %}
{{     tmpl_var__dict_update(_name, _value) }}{%
     elif _template == 'dict_update_legacy' %}
{{     tmpl_var__dict_update_legacy(_name, _value) }}{%
     elif _template == 'tuple_list' %}
{{     tmpl_var__tuple_list(_name, _value) }}{%
     elif _template == 'nested_tuple_list' %}
{{     tmpl_var__nested_tuple_list(_name, _value) }}{%
     elif (_template == 'rule') or
          (_template == 'rule_w_init') or
          (_template == 'rule_w_default') %}
{%     set _rule_kwargs = {} %}
{%     for _arg in checkmk_server__site_rule_kwargs %}
{%       if _arg in _cfg_entry %}
{%         set _ = _rule_kwargs.update({_arg: _cfg_entry[_arg]}) %}
{%       endif %}
{%     endfor %}
{%     if _template == 'rule' %}

{{       tmpl_var__rule(_name, _element|d(None), _value, _tags, _hosts, _conditions, _rule_kwargs) }}{%
       elif _template == 'rule_w_init' %}

{{       tmpl_var__rule_w_init(_name, _value, _tags, _hosts, _conditions, _rule_kwargs) }}{%

       elif _template == 'rule_w_default' %}

{{       tmpl_var__rule_w_default(_name, _element, _value, _tags, _hosts, _conditions, _rule_kwargs) }}{%
       endif %}{%
     elif _template == 'custom' %}
{{     tmpl_var__custom(_cfg_entry.content|d("")) }}{%
     endif %}
{% endmacro %}


{#
 # The tmpl_var__key_value() macro will generate simple key/value variable
 # definitions.
 #}

{% macro tmpl_var__key_value(_name, _value) %}

{{ _name }} = {{ _value }}
{% endmacro %}


{#
 # The tmpl_var__dict_update_legacy() macro will generate configuration
 # statement for updating a Python dictionary. Likely to avoid collision
 # with older variables it includes a check for the object type and conditional
 # re-initialization.
 #}

{% macro tmpl_var__dict_update_legacy(_name, _value) %}

if type({{ _name }}) != dict:
    {{ _name }} = {}
{{ _name }}.update({{ _value | pprint }})
{% endmacro %}


{#
 # The tmpl_var__dict_update() macro will generate configuration statement
 # for updating a Python dictionary.
 #}

{% macro tmpl_var__dict_update(_name, _value) %}

{{ _name }}.update(
{{ _value | pprint }})
{% endmacro %}


{#
 # The tmpl_var__tuple_list() macro will generate a variable definition with
 # list of tuples "[('key', u'value')]" which must be given as a list
 # of key/value pairs.
 #}

{% macro tmpl_var__tuple_list(_name, _element_list) %}

{{ _name }} += \
[{% for _item in _element_list %}('{{ _item.keys()[0] }}', u'{{ _item.values()[0] }}'){% if not loop.last %}, {% endif %}{% endfor %}]
{% endmacro %}


{#
 # The tmpl_var__rule() macro will generate a Check_MK rule variable entry.
 #
 # Arguments:
 #   _name: Check_MK variable name (string), required
 #   _element: Element name if the variable is a dictionary
 #   _value: Rule name (string), will be omitted if empty
 #   _tags: Preformatted list of Check_MK tags
 #   _hosts: Preformatted list of Check_MK host names
 #   _conditions: List of patterns which will be formatted as unicode list
 #                elements, will be omitted if empty
 #   _kwargs: Additional rule properties (dictionary)
 #
 # The regex_replace() filter will make sure that the dictionary keys are not
 # serialized as unicode strings.
 #}

{% macro tmpl_var__rule(_name, _element, _value, _tags, _hosts, _conditions, _kwargs) %}

{{ _name }}{{ "['" + _element + "']" if _element else "" }} = [
  ( {{ tmpl_format__value(_value) }}{{ _tags }}, {{ _hosts }}, {{ _conditions | pprint + ", " if _conditions | length > 0 else "" }}{{ _kwargs | pprint | replace("\n", "") | regex_replace("(, |{)u'", "\\1'") }} ),
] + {{ _name }}{{ "['" + _element + "']" if _element else "" }}
{% endmacro %}


{#
 # The tmpl_var__rule_w_init() macro will make sure the given variable is
 # initialized as list and then use the tpl_var__rule() macro to generate
 # the rule entry.
 #}

{% macro tmpl_var__rule_w_init(_name, _value, _tags, _hosts, _conditions, _kwargs) %}

if {{ _name }} == None:
    {{ _name }} = []
{{ tmpl_var__rule(_name, None, _value, _tags, _hosts, _conditions, _kwargs) }}{%
   endmacro %}


{#
 # The tmpl_var__rule_w_default() macro generate a rule entry as dictionary
 # element after setting an empty list as default element.
 #}

{% macro tmpl_var__rule_w_default(_name, _element, _value, _tags, _hosts, _conditions, _kwargs) %}
{% if (not _value is number) and (_value | length == 0) %}
{%   set _value = 'None' %}
{% endif %}

{{ _name }}.setdefault('{{ _element }}', [])
{{ tmpl_var__rule(_name, _element, _value, _tags, _hosts, _conditions, _kwargs) }}{%
   endmacro %}


{#
 # The tmpl_var__nested_tuple_list() macro will generate a variable
 # definition with a list of 3-element tuples, where the last element can
 # be a list of 3-element tuples.
 #}

{% macro tmpl_var__nested_tuple_list(_name, _elements) %}

{{ _name }} += \
[{% for e in _elements %}('{{ e.keys()[0] }}',
  u'{{ e.values()[0].keys()[0] }}',
  [{% for i in e.values()[0].values()[0] %}('{{ i.keys()[0] }}', u'{{ i.values()[0].keys()[0] }}', [{% for j in i.values()[0].values()[0] %}'{{ j }}'{% if not loop.last %}, {% endif %}{% endfor %}]){% if not loop.last %},
   {% endif %}{% endfor %}]){% if not loop.last %},
 {% endif %}{% endfor %}]
{% endmacro %}


{#
 # The tmpl_var__custom() macro will simply print the given content.
 #}

{% macro tmpl_var__custom(_content) %}

{{ _content }}
{% endmacro %}


{#
 # The tmpl_format__value() macro will format an input value as required for
 # a Check_MK rule.
 #}

{% macro tmpl_format__value(_value) %}
{#
 # Properly quote strings. The 'None' value is used to encode None, therefore
 # don't print it as string.
 #}
{% if (_value is string) and
      (_value | length > 0) and
      (_value != 'None') %}
{%   set _rule = "'" + _value + "'" %}
{% elif (_value is mapping) %}
{#
 #   Remove unicode hints for dictionary keys and substitute lists with tuples.
 #}
{%   set _rule = _value | regex_replace("(, |{)u'", "\\1'") | replace("[", "(") | replace("]", ")") %}
{% else %}
{#
 #   Cast number to string type for concatenation and length() filter to succeed.
 #}
{%   set _rule = _value|string %}
{% endif

%}{{ _rule + ", " if _rule | length > 0 else "" }}{%

   endmacro %}
