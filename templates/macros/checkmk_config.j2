{% macro checkmk_config(_filename, _wato, _config_map) %}
{% if _config_map|d([]) | list %}
{%   for _entry in _config_map %}
{%     if (_entry.filename|d("") == _filename) and (_entry.wato|d(True) == _wato|bool) %}
{%       set _state = 'present' %}
{%       if 'rule_state' in _entry %}
{%         set _state = _entry.rule_state %}
{%       endif %}
{%       if _state == 'present' %}
{%         set _template = _entry.template|d("custom") %}
{%         if _template == 'key_value' %}
{{ key_value(_entry.name, _entry.value) }}
{%         elif _template == 'dict_element' %}
{{ dict_element(_entry.name, _entry.value) }}
{%         elif _template == 'tuple_list' %}
{{ tuple_list(_entry.name, _entry.value) }}
{%         elif _template == 'rule' %}
{{ rule(_entry.name, _entry.value, _entry.tags, _entry.description) }}
{%         elif _template == 'active_check' %}
{{ active_check(_entry.name, _entry.filter, _entry.comment) }}
{%         elif _template == 'nested_tuplelist_list' %}
{{ nested_tuplelist_list(_entry.name, _entry.value) }}
{%         elif _template == 'custom' %}
{{ custom(_entry.content) }}
{%         endif %}
{%       endif %}
{%     endif %}
{%   endfor %}
{% endif %}
{% endmacro %}


{#
 # The key_value() macro will generate simple key/value variable definitions
 #}

{% macro key_value(name, value) %}

{{ name }} = {{ value }}
{% endmacro %}


{#
 # The dict_element() macro will generate configuration statement for updating
 # a Python dictionary. Likely to avoid collision with older variables, it
 # includes a check for the object type and conditional re-initialization.
 #}

{% macro dict_element(name, value) %}

if type({{ name }}) != dict:
    {{ name }} = {}
{{ name }}.update({{ value | pprint }})
{% endmacro %}


{#
 # The tuple_list() macro will generate a variable definition with
 # list of tuples "[('key', u'value')]" which must be given as a list
 # of key/value pairs.
 #}

{% macro tuple_list(name, elements) %}

{{ name }} += \
[{% for e in elements %}('{{ e.keys()[0] }}', u'{{ e.values()[0] }}'){% if not loop.last %}, {% endif %}{% endfor %}]
{% endmacro %}


{#
 # The rule() macro will generate a (yet) very simplified variable definition
 # for a monitoring rule.
 #}
{% macro rule(name, value, tags, desc) %}

{{ name }} = [
  ( '{{ value }}', ['{{ tags | join("', '") }}', ], ALL_HOSTS, {'description': u'{{ desc }}'} ),
] + {{ name }}
{% endmacro %}


{#
 # The active_check() macro will generate the necessary active_checks variable
 # definition required to define a regular Nagios active check.
 #}
{% macro active_check(name, filter, comment) %}

active_checks.setdefault('{{ name }}', [])

active_checks['{{ name }}'] = [
  ( None, [], {{ filter }}, {'comment': u'{{ comment }}' } ),
]
{% endmacro %}


{#
 # The nested_tuplelist_list() macro will generate a variable definition with
 # a list of 3-element tuples, where the last element can be a list of
 # 3-element tuples.
 #}

{% macro nested_tuplelist_list(name, elements) %}

{{ name }} += \
[{% for e in elements %}('{{ e.keys()[0] }}',
  u'{{ e.values()[0].keys()[0] }}',
  [{% for i in e.values()[0].values()[0] %}('{{ i.keys()[0] }}', u'{{ i.values()[0].keys()[0] }}', [{% for j in i.values()[0].values()[0] %}'{{ j }}'{% if not loop.last %}, {% endif %}{% endfor %}]){% if not loop.last %},
   {% endif %}{% endfor %}]){% if not loop.last %},
 {% endif %}{% endfor %}]
{% endmacro %}


{#
 # The custom() macro will simply print the given content.
 #}

{% macro custom(content) %}

{{ content }}
{% endmacro %}
