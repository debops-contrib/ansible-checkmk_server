---
# Default variables
# =================

# ---------------------
# General Configuration
# ---------------------

# .. envvar:: checkmk_server__version
#
# Check_MK software version
checkmk_server__version: '1.2.8p1'


# .. envvar:: checkmk_server__patches
#
# Custom patches to apply after installing Check_MK package
checkmk_server__patches:
  - patch: 'check-mk-raw-1.2.6p15-fix-omd-setup.patch'
    file: '/omd/versions/{{ checkmk_server__version }}.cre/bin/omd'
  - patch: 'check-mk-raw-1.2.6p15-set-https-proxy-header.patch'
    file: '/omd/versions/default/skel/etc/apache/apache-own.conf'


# .. envvar:: checkmk_server__dependencies
#
# Enable execution of ``debops.checkmk_server`` role dependencies. This
# variable can be used in playbooks to disable hardcoded dependencies during
# transition to playbook-based ones.
checkmk_server__dependencies: True


# .. envvar:: checkmk_server__ferm_dependent_rules
#
# Firewall configuration using the ``debops.ferm`` Ansible role.
checkmk_server__ferm_dependent_rules:
  - type: 'accept'
    dport: '{{ [ "http", "https" ] if checkmk_server__pki else [ "http" ] }}'
    saddr: '{{ checkmk_server__allow }}'
    accept_any: True
    weight: '40'
    role: 'checkmk_server'


# .. envvar:: checkmk_server__allow
#
# List of IP addresses or network CIDR ranges allowed to connect to the
# Check_MK Web interface. If list is empty, anyone can connect.
checkmk_server__allow: []


# ------------
# APT packages
# ------------

# .. envvar:: checkmk_server__raw_package
#
# Check_MK RAW package download URL. Alternatively this can also be a local
# deb file or a package name in an already available apt repository.
checkmk_server__raw_package: 'https://mathias-kettner.de/support/{{ checkmk_server__version }}/check-mk-raw-{{ checkmk_server__version }}_0.{{ ansible_distribution_release }}_amd64.deb'


# .. envvar:: checkmk_server__prerequisite_packages
#
# List of prerequisite packages which must be available before installing
# the Check_MK RAW package
checkmk_server__prerequisite_packages: [ 'apache2', 'aptitude' ]


# ---------------------------
# Check_MK Site Configuration
# ---------------------------

# .. envvar:: checkmk_server__site
#
# Check_MK site name
checkmk_server__site: 'debops'


# .. envvar:: checkmk__server_user
#
# Check_MK site user name (mustn't exist before creating the site)
checkmk_server__user: '{{ checkmk_server__site }}'


# .. envvar:: checkmk_server__runtime_config
#
# Check_MK site runtime configuration (``omd config``). Changing
# these values will shutdown Check_MK for reconfiguration.
checkmk_server__runtime_config:
  - var: 'ADMIN_MAIL'
    value: 'hostmaster@{{ ansible_domain }}'
  - var: 'CORE'
    value: 'icinga'


# .. envvar:: checkmk_server__sshkeys
#
# Indicate if a SSH keypair should be provided to allow agent
# connections via SSH. For more information check
# :ref:`checkmk_server__sshkeys`.
checkmk_server__sshkeys:
  generate_keypair: True


# ---------------------------
# Multisite Web Configuration
# ---------------------------

# .. envvar:: checkmk_server__multisite_config_path
#
# Configuration path for Check_MK multisite configurations. Relative to the
# site's chroot directory.
checkmk_server__multisite_config_path: 'etc/check_mk/multisite.d'


# .. envvar:: checkmk_server__multisite_config_map
#
# List of dictionaries which will generate the Check_MK multisite
# configuration in :envvar:`checkmk_server__multisite_config_path`.
checkmk_server__multisite_config_map: '{{ checkmk_server__wato_aux_tags }}'


# .. envvar:: checkmk_server__wato_aux_tags
#
# Define ``wato_aux_tags``
checkmk_server__wato_aux_tags:
  - name: 'wato_aux_tags'
    filename: 'hosttags.mk'
    template: 'tuple_list'
    value:
      - 'snmp': 'monitor via SNMP'
      - 'tcp': 'monitor via Check_MK Agent'
    wato: True


# ----------------
# Monitoring Rules
# ----------------

# .. envvar:: checkmk_server__site_config_path
#
# Configuration path for Check_MK main configurations. Relative to the site's
# chroot directory.
checkmk_server__site_config_path: 'etc/check_mk/conf.d'


# .. envvar:: checkmk_server__site_config_map
#
# List of configuration dictionaries which will generate the Check_MK
# monitoring definitions.
checkmk_server__site_config_map: '{{ checkmk_server__datasource_programs }}'


# .. envvar:: checkmk_server__datasource_programs
#
# Define additional ``datasource_programs`` for agent access via SSH.
checkmk_server__datasource_programs:
  - name: 'datasource_programs'
    filename: 'rules.mk'
    value: 'ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=10s -l root <IP> /usr/bin/check_mk_agent'
    tags: [ 'cmk-agent-ssh' ]
    description: 'Check_MK Agent via SSH'
    wato: True


# -----------------
# PKI Configuration
# -----------------

# .. envvar:: checkmk_server__pki
#
# Enable or disable support for HTTPS in Check_MK server (using
# ``debops.pki``).
checkmk_server__pki: '{{ (True
                          if (ansible_local|d() and ansible_local.pki|d() and
                              ansible_local.pki.enabled|d() | bool)
                          else False) | bool }}'


# .. envvar:: checkmk_server__pki_path
#
# Base path for PKI directory.
checkmk_server__pki_path: '{{ ansible_local.pki.path
                              if (ansible_local|d() and ansible_local.pki|d() and
                                  ansible_local.pki.path|d())
                              else "/etc/pki/realms" }}'


# .. envvar:: checkmk_server__pki_realm
#
# Default PKI realm used by Check_MK server.
checkmk_server__pki_realm: '{{ ansible_local.pki.realm
                               if (ansible_local|d() and ansible_local.pki|d() and
                                   ansible_local.pki.realm|d())
                               else "domain" }}'


# .. envvar:: checkmk_server__pki_ca
#
# Root CA certificate, relative to ``checkmk_server__pki_realm``.
checkmk_server__pki_ca: 'CA.crt'


# .. envvar:: checkmk_server__pki_crt
#
# Host certificate, relative to ``checkmk_server__pki_realm``.
checkmk_server__pki_crt: 'default.crt'


# .. envvar:: checkmk_server__pki_key
#
# Host private key, relative to ``checkmk_server__pki_realm``.
checkmk_server__pki_key: 'default.key'


# .. envvar:: checkmk_server__tls_options
#
# Additional Apache mod_ssl options. Valid configuration keys:
# ``SSLCipherSuite``, ``SSLHonorCipherOrder``, ``SSLProtocols``,
# ``SSLStrictSNIVHostCheck``
checkmk_server__tls_options:
  SSLHonorCipherOrder: 'On'
  SSLCipherSuite: 'ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS'
