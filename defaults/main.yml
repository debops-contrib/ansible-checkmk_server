---
# Default variables
# =================

# ---------------------
# General Configuration
# ---------------------

# .. envvar:: checkmk_server__version
#
# Check_MK software version
checkmk_server__version: '1.2.8p2'


# .. envvar:: checkmk_server__version_label
#
# Check_MK version label used with the :command:`omd` tool
checkmk_server__version_label: '{{ checkmk_server__version }}.cre'


# .. envvar:: checkmk_server__site_update
#
# Update Check_MK site if current version is lower than
# :envvar:`checkmk_server__version`
checkmk_server__site_update: False


# .. envvar:: checkmk_server__patches
#
# Custom patches to apply after installing Check_MK package
checkmk_server__patches:
  - patch: 'check-mk-raw-1.2.6p15-fix-omd-setup.patch'
    file: '/omd/versions/{{ checkmk_server__version_label }}/bin/omd'
  - patch: 'check-mk-raw-1.2.6p15-set-https-proxy-header.patch'
    file: '/omd/versions/default/skel/etc/apache/apache-own.conf'


# .. envvar:: checkmk_server__dependencies
#
# Enable execution of ``debops.checkmk_server`` role dependencies. This
# variable can be used in playbooks to disable hardcoded dependencies during
# transition to playbook-based ones.
checkmk_server__dependencies: True


# .. envvar:: checkmk_server__ferm_dependent_rules
#
# Firewall configuration using the ``debops.ferm`` Ansible role.
checkmk_server__ferm_dependent_rules:
  - type: 'accept'
    dport: '{{ [ "http", "https" ] if checkmk_server__pki else [ "http" ] }}'
    saddr: '{{ checkmk_server__allow }}'
    accept_any: True
    weight: '40'
    role: 'checkmk_server'


# .. envvar:: checkmk_server__allow
#
# List of IP addresses or network CIDR ranges allowed to connect to the
# Check_MK Web interface. If list is empty, anyone can connect.
checkmk_server__allow: []


# .. envvar:: checkmk_server__software_inventory
#
# Enable collection of installed software. Requires the ``mk_inventory``
# plugin to be installed on the Check_MK agents.
checkmk_server__software_inventory: True


# ------------
# APT packages
# ------------

# .. envvar:: checkmk_server__raw_package
#
# Check_MK RAW package download URL. Alternatively this can also be a local
# deb file or a package name in an already available apt repository.
checkmk_server__raw_package: 'https://mathias-kettner.de/support/{{ checkmk_server__version }}/check-mk-raw-{{ checkmk_server__version }}_0.{{ ansible_distribution_release }}_amd64.deb'


# .. envvar:: checkmk_server__prerequisite_packages
#
# List of prerequisite packages which must be available before installing
# the Check_MK RAW package
checkmk_server__prerequisite_packages: [ 'apache2', 'aptitude' ]


# ---------------------------
# Check_MK Site Configuration
# ---------------------------

# .. envvar:: checkmk_server__site
#
# Check_MK site name
checkmk_server__site: 'debops'


# .. envvar:: checkmk_server__runtime_config
#
# Check_MK site runtime configuration (``omd config``). Changing
# these values will shutdown Check_MK for reconfiguration.
checkmk_server__runtime_config:
  - var: 'ADMIN_MAIL'
    value: 'hostmaster@{{ ansible_domain }}'
  - var: 'CORE'
    value: 'icinga'


# .. envvar:: checkmk_server__sshkeys
#
# Indicate if a SSH keypair should be provided to allow agent
# connections via SSH. For more information check
# :ref:`checkmk_server__sshkeys`.
checkmk_server__sshkeys:
  generate_keypair: True


# ---------------------------
# Multisite Web Configuration
# ---------------------------

# .. envvar:: checkmk_server__multisite_config_path
#
# Configuration path for Check_MK multisite configurations. Relative to the
# site's chroot directory.
checkmk_server__multisite_config_path: 'etc/check_mk/multisite.d'


# .. envvar:: checkmk_server__multisite_config_map
#
# List of dictionaries which will generate the Check_MK multisite
# configuration in :envvar:`checkmk_server__multisite_config_path`.
checkmk_server__multisite_config_map: '{{ checkmk_server__wato_host_tags +
                                          checkmk_server__wato_aux_tags }}'


# .. envvar:: checkmk_server__wato_host_tags
#
# Define the default upstream ``wato_host_tags`` configuration with
# additional ``cmk-agent-ssh`` tag to indicate SSH-based Check_MK agents.
checkmk_server__wato_host_tags:
  - name: 'wato_host_tags'
    filename: 'hosttags.mk'
    template: 'nested_tuplelist_list'
    value:
      - 'agent':
          'Agent type':
            - 'cmk-agent':
                'Check_MK Agent (xinetd)': ['tcp']
            - 'cmk-agent-ssh':
                'Check_MK Agent (ssh)': []
            - 'snmp-only':
                'SNMP (Networking device, Appliance)': ['snmp']
            - 'snmp-v1':
                'Legacy SNMP device (using V1)': ['snmp']
            - 'snmp-tcp':
                'Dual: Check_MK Agent + SNMP': ['snmp', 'tcp']
            - 'ping':
                'No Agent': []
      - 'criticality':
          'Criticality':
            - 'prod':
                'Productive system': []
            - 'critical':
                'Business critical': []
            - 'test':
                'Test system': []
            - 'offline':
                'Do not monitor this host': []
      - 'networking':
          'Networking Segment':
            - 'lan':
                'Local network (low latency)': []
            - 'wan':
                'WAN (high latency)': []
            - 'dmz':
                'DMZ (low latency, secure access)': []
    wato: True

# .. envvar:: checkmk_server__wato_aux_tags
#
# Define the default upstream ``wato_aux_tags`` configuration.
checkmk_server__wato_aux_tags:
  - name: 'wato_aux_tags'
    filename: 'hosttags.mk'
    template: 'tuple_list'
    value:
      - 'snmp': 'monitor via SNMP'
      - 'tcp': 'monitor via Check_MK Agent'
    wato: True


# .. envvar:: checkmk_server__multisite_roles
#
# Multisite permission roles to be configured
checkmk_server__multisite_roles: '{{ checkmk_server__default_roles }}'


# .. envvar:: checkmk_server__default_roles
#
# Default upstream multisite permission roles
checkmk_server__default_roles:
  admin:
    alias: 'Administrator'
    builtin: True
    permissions: {}
  guest:
    alias: 'Guest User'
    builtin: True
    permissions: {}
  user:
    alias: 'Normal monitoring user'
    builtin: True
    permissions: {}


# ----------------
# Monitoring Rules
# ----------------

# .. envvar:: checkmk_server__site_config_path
#
# Configuration path for Check_MK main configurations. Relative to the site's
# chroot directory.
checkmk_server__site_config_path: 'etc/check_mk/conf.d'


# .. envvar:: checkmk_server__site_config_map
#
# List of configuration dictionaries which will generate the Check_MK
# monitoring definitions.
checkmk_server__site_config_map: '{{ checkmk_server__datasource_programs +
                                     checkmk_server__if_inventory_uses_description +
                                     checkmk_server__rules_software_inventory }}'


# .. envvar:: checkmk_server__datasource_programs
#
# Define additional ``datasource_programs`` for agent access via SSH.
checkmk_server__datasource_programs:
  - name: 'datasource_programs'
    filename: 'rules.mk'
    template: 'rule'
    value: 'ssh -o BatchMode=yes -o StrictHostKeyChecking=no -o ConnectTimeout=10s -l root <IP> /usr/bin/check_mk_agent'
    tags: [ 'cmk-agent-ssh' ]
    description: 'Check_MK Agent via SSH'
    wato: True


# .. envvar:: checkmk_server__software_inventory_rules:
#
# Check_MK rules for enabling software inventory check. This check can be
# enabled/disabled by setting :envvar:`checkmk_server__software_inventory`.
checkmk_server__rules_software_inventory:
  - name: 'inventory_check_interval'
    filename: 'global.mk'
    wato: True
    template: 'key_value'
    value: 1440
    rule_state: '{{ "present" if checkmk_server__software_inventory|d() | bool
                    else "absent" }}'
  - name: 'cmk_inv'
    filename: 'rules.mk'
    wato: True
    template: 'active_check'
    filter: 'ALL_HOSTS'
    comment: 'Enable collection of hardware/software information'
    rule_state: '{{ "present" if checkmk_server__software_inventory|d() | bool
                    else "absent" }}'


# .. envvar:: checkmk_server__if_inventory_uses_description
#
# Set interface name instead of index for network interface check via
# ``if_inventory_uses_description``.
checkmk_server__if_inventory_uses_description:
  - name: 'if_inventory_uses_description'
    filename: 'networking.mk'
    template: 'key_value'
    value: 'True'
    wato: False


# -----------------
# PKI Configuration
# -----------------

# .. envvar:: checkmk_server__pki
#
# Enable or disable support for HTTPS in Check_MK server (using
# ``debops.pki``).
checkmk_server__pki: '{{ (True
                          if (ansible_local|d() and ansible_local.pki|d() and
                              ansible_local.pki.enabled|d() | bool)
                          else False) | bool }}'


# .. envvar:: checkmk_server__pki_path
#
# Base path for PKI directory.
checkmk_server__pki_path: '{{ ansible_local.pki.path
                              if (ansible_local|d() and ansible_local.pki|d() and
                                  ansible_local.pki.path|d())
                              else "/etc/pki/realms" }}'


# .. envvar:: checkmk_server__pki_realm
#
# Default PKI realm used by Check_MK server.
checkmk_server__pki_realm: '{{ ansible_local.pki.realm
                               if (ansible_local|d() and ansible_local.pki|d() and
                                   ansible_local.pki.realm|d())
                               else "domain" }}'


# .. envvar:: checkmk_server__pki_ca
#
# Root CA certificate, relative to ``checkmk_server__pki_realm``.
checkmk_server__pki_ca: 'CA.crt'


# .. envvar:: checkmk_server__pki_crt
#
# Host certificate, relative to ``checkmk_server__pki_realm``.
checkmk_server__pki_crt: 'default.crt'


# .. envvar:: checkmk_server__pki_key
#
# Host private key, relative to ``checkmk_server__pki_realm``.
checkmk_server__pki_key: 'default.key'


# .. envvar:: checkmk_server__tls_options
#
# Additional Apache mod_ssl options. Valid configuration keys:
# ``SSLCipherSuite``, ``SSLHonorCipherOrder``, ``SSLProtocols``,
# ``SSLStrictSNIVHostCheck``
checkmk_server__tls_options:
  SSLHonorCipherOrder: 'On'
  SSLCipherSuite: 'ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS'
