---
#
# Check_MK site configuration
#
- name: Get Check_MK default version
  stat:
    path: '/omd/versions/default'
  register: checkmk_server_register_default
  always_run: True

- name: Set new default version
  command: omd setversion '{{ checkmk_server__version_label }}'
  when: (checkmk_server_register_default.stat.lnk_source |
         basename) != checkmk_server__version_label

- name: Create Check_MK site
  command: omd create '{{ checkmk_server__site }}'
  args:
    creates: '/omd/sites/{{ checkmk_server__site }}/etc/omd/site.conf'

- name: Get Check_MK site version
  command: omd version '{{ checkmk_server__site }}'
  register: checkmk_server_register_site_version
  changed_when: False
  always_run: True

- name: Trigger site version update
  set_fact:
    checkmk_server__fact_update: True
  always_run: True
  when: checkmk_server__update|d(False)|bool and
        ((checkmk_server_register_site_version.stdout.split(" ")[-1] | splitext)[0] |
         version_compare(checkmk_server__version, "<"))

- name: Check cron.allow file
  stat:
    path: '/etc/cron.allow'
  register: checkmk_server_register_cron

- name: Grant cron permissions to Check_MK user
  lineinfile:
    dest: '/etc/cron.allow'
    line: '{{ checkmk_server__user }}'
    regexp: '^{{ checkmk_server__user }}$'
  when: checkmk_server_register_cron.stat.exists
  notify: [ 'Restart Check_MK' ]

- name: Get Check_MK site runtime configuration
  command: omd config '{{ checkmk_server__site }}' show '{{ item.var }}'
  with_items: '{{ checkmk_server__runtime_config }}'
  register: checkmk_server_register_runtime
  changed_when: False
  always_run: True

- name: Shutdown Check_MK site (if required)
  service:
    name: 'check-mk-raw-{{ (checkmk_server_register_site_version.stdout.split(" ")[-1] | splitext)[0] }}'
    state: stopped
  when: (not item.stdout == item.item.value) or
        checkmk_server__fact_update|d(False)
  with_items: '{{ checkmk_server_register_runtime.results }}'

- name: Run Check_MK site update
  command: omd --force update '{{ checkmk_server__site }}'
  when: checkmk_server__fact_update|d(False)

- name: Set Check_MK site runtime properties
  command: omd config '{{ checkmk_server__site }}' set '{{ item.item.var }}' '{{ item.item.value }}'
  when: not item.stdout == item.item.value
  with_items: '{{ checkmk_server_register_runtime.results }}'

- name: Enable and start Check_MK site
  service:
    name: 'check-mk-raw-{{ checkmk_server__version if checkmk_server__fact_update|d() else (checkmk_server_register_site_version.stdout.split(" ")[-1] | splitext)[0] }}'
    state: started
    enabled: yes

- name: Get Check_MK site user home directory
  shell: 'getent passwd {{ checkmk_server__user }} | cut -d":" -f6'
  register: checkmk_server_register_home
  changed_when: False
  always_run: True
  tags: [ 'role::checkmk_server:rules' ]

- name: Create .ssh directory
  file:
    path: '{{ checkmk_server_register_home.stdout }}/.ssh'
    state: directory
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
    mode: '0700'
  when: checkmk_server__sshkeys|d()

- name: Generate SSH keypair
  command: 'ssh-keygen {{ "-b " + checkmk_server__sshkeys.keysize if "keysize" in checkmk_server__sshkeys else "-b 4096" }} -f {{ checkmk_server_register_home.stdout }}/.ssh/id_rsa -N ""'
  args:
    creates: '{{ checkmk_server_register_home.stdout }}/.ssh/id_rsa'
  when: checkmk_server__sshkeys|d() and
        ("generate_keypair" in checkmk_server__sshkeys|d() and
         checkmk_server__sshkeys.generate_keypair)

- name: Fix SSH keypair ownership
  file:
    path: '{{ checkmk_server_register_home.stdout }}/.ssh/{{ item }}'
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
  with_items: [ 'id_rsa', 'id_rsa.pub' ]
  when: checkmk_server__sshkeys|d() and
        ("generate_keypair" in checkmk_server__sshkeys|d() and
         checkmk_server__sshkeys.generate_keypair)

- name: Copy SSH private key
  copy:
    src: '{{ checkmk_server__sshkeys.privatekey_file }}'
    dest: '{{ checkmk_server_register_home.stdout }}/.ssh/id_rsa'
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
    mode: '0600'
  when: checkmk_server__sshkeys|d() and
        "privatekey_file" in checkmk_server__sshkeys|d()

- name: Copy SSH public key
  copy:
    src: '{{ checkmk_server__sshkeys.publickey_file }}'
    dest: '{{ checkmk_server_register_home.stdout }}/.ssh/id_rsa.pub'
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
    mode: '0644'
  when: checkmk_server__sshkeys|d() and
        "publickey_file" in checkmk_server__sshkeys|d()

- name: Read SSH public key
  command: 'cat {{ checkmk_server_register_home.stdout }}/.ssh/id_rsa.pub'
  changed_when: False
  register: checkmk_server_register_ssh_pubkey
  when: checkmk_server__sshkeys|d()

- name: Generate Check_MK WATO multisite definitions
  template:
    src: '{{ lookup("template_src", "etc/check_mk/multisite.d/wato/" + item | basename) }}'
    dest: '{{ checkmk_server_register_home.stdout }}/{{ checkmk_server__multisite_config_path }}/wato/{{ item | basename | replace(".j2", "") }}'
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
    mode: '0644'
  with_fileglob: [ '../templates/etc/check_mk/multisite.d/wato/*.mk.j2' ]
  notify: [ 'Reload Check_MK configuration' ]
  tags: [ 'role::checkmk_server:rules', 'role::checkmk_server:multisite' ]

- name: Generate Check_MK custom multisite definitions
  template:
    src: 'etc/check_mk/multisite.d/custom.mk.j2'
    dest: '{{ checkmk_server_register_home.stdout }}/{{ checkmk_server__multisite_config_path }}/{{ item["filename"] }}'
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
    mode: '0644'
  with_items: '{{ checkmk_server__multisite_config_map }}'
  when: not item['wato']
  notify: [ 'Reload Check_MK configuration' ]
  tags: [ 'role::checkmk_server:rules', 'role::checkmk_server:multisite' ]

- name: Generate Check_MK WATO monitoring definitions
  template:
    src: '{{ lookup("template_src", "etc/check_mk/conf.d/wato/" + item | basename) }}'
    dest: '{{ checkmk_server_register_home.stdout }}/{{ checkmk_server__site_config_path }}/wato/{{ item | basename | replace(".j2", "") }}'
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
    mode: '0644'
  with_fileglob: [ '../templates/etc/check_mk/conf.d/wato/*.mk.j2' ]
  notify: [ 'Reload Check_MK configuration' ]
  tags: [ 'role::checkmk_server:rules' ]

- name: Generate Check_MK custom monitoring definitions
  template:
    src: 'etc/check_mk/conf.d/custom.mk.j2'
    dest: '{{ checkmk_server_register_home.stdout }}/{{ checkmk_server__site_config_path }}/{{ item["filename"] }}'
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
    mode: '0644'
  with_items: '{{ checkmk_server__site_config_map }}'
  when: not item['wato']
  notify: [ 'Reload Check_MK configuration' ]
  tags: [ 'role::checkmk_server:rules' ]
