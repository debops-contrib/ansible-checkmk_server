---
#
# Check_MK site configuration
#
- name: Get Check_MK default version
  stat:
    path: '/omd/versions/default'
  register: checkmk_server_register_default
  always_run: True

- name: Set new default version
  command: omd setversion '{{ checkmk_server__version_label }}'
  ignore_errors: '{{ ansible_check_mode }}'
  when: (checkmk_server_register_default.stat.lnk_source |
         basename) != checkmk_server__version_label

- name: Create Check_MK site
  command: omd create '{{ checkmk_server__site }}'
  args:
    creates: '/omd/sites/{{ checkmk_server__site }}/etc/omd/site.conf'

- name: Get Check_MK site version
  command: omd version '{{ checkmk_server__site }}'
  register: checkmk_server_register_site_version
  changed_when: False
  always_run: True
  ignore_errors: '{{ ansible_check_mode }}'

- name: Trigger site version update
  set_fact:
    checkmk_server__fact_update: True
  always_run: True
  ignore_errors: '{{ ansible_check_mode }}'
  when: checkmk_server__update|d(False)|bool and
        ((checkmk_server_register_site_version.stdout.split(" ")[-1] | splitext)[0] |
         version_compare(checkmk_server__version, "<"))

- name: Check cron.allow file
  stat:
    path: '/etc/cron.allow'
  register: checkmk_server_register_cron

- name: Grant cron permissions to Check_MK user
  lineinfile:
    dest: '/etc/cron.allow'
    line: '{{ checkmk_server__user }}'
    regexp: '^{{ checkmk_server__user }}$'
  when: checkmk_server_register_cron.stat.exists
  notify: [ 'Restart Check_MK' ]

- name: Get Check_MK site runtime configuration
  command: omd config '{{ checkmk_server__site }}' show '{{ item.var }}'
  with_items: '{{ checkmk_server__runtime_config }}'
  register: checkmk_server_register_runtime
  changed_when: False
  always_run: True
  ignore_errors: '{{ ansible_check_mode }}'

- name: Shutdown Check_MK site (if required)
  service:
    name: 'check-mk-raw-{{ (checkmk_server_register_site_version.stdout.split(" ")[-1] | splitext)[0] }}'
    state: stopped
  when: (not item.stdout == item.item.value) or
        checkmk_server__fact_update|d(False)
  with_items: '{{ checkmk_server_register_runtime.results
                  if "results" in checkmk_server_register_runtime else [] }}'

- name: Run Check_MK site update
  command: omd --force update '{{ checkmk_server__site }}'
  ignore_errors: '{{ ansible_check_mode }}'
  when: checkmk_server__fact_update|d(False)

- name: Set Check_MK site runtime properties
  command: omd config '{{ checkmk_server__site }}' set '{{ item.item.var }}' '{{ item.item.value }}'
  when: not item.stdout == item.item.value
  with_items: '{{ checkmk_server_register_runtime.results
                  if "results" in checkmk_server_register_runtime else [] }}'

- name: Enable and start Check_MK site
  service:
    name: 'check-mk-raw-{{ checkmk_server__version if checkmk_server__fact_update|d() else (checkmk_server_register_site_version.stdout.split(" ")[-1] | splitext)[0] }}'
    state: started
    enabled: yes
  ignore_errors: '{{ ansible_check_mode }}'

- name: Create .ssh directory
  file:
    path: '{{ checkmk_server__site_home }}/.ssh'
    state: directory
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
    mode: '0700'
  when: checkmk_server__sshkeys|d()

- name: Generate SSH keypair
  command: 'ssh-keygen {{ "-b " + checkmk_server__sshkeys.keysize if "keysize" in checkmk_server__sshkeys else "-b 4096" }} -f {{ checkmk_server__site_home }}/.ssh/id_rsa -N ""'
  args:
    creates: '{{ checkmk_server__site_home }}/.ssh/id_rsa'
  when: checkmk_server__sshkeys|d() and
        ("generate_keypair" in checkmk_server__sshkeys|d() and
         checkmk_server__sshkeys.generate_keypair)

- name: Fix SSH keypair ownership
  file:
    path: '{{ checkmk_server__site_home }}/.ssh/{{ item }}'
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
  ignore_errors: '{{ ansible_check_mode }}'
  with_items: [ 'id_rsa', 'id_rsa.pub' ]
  when: checkmk_server__sshkeys|d() and
        ("generate_keypair" in checkmk_server__sshkeys|d() and
         checkmk_server__sshkeys.generate_keypair)

- name: Copy SSH private key
  copy:
    src: '{{ checkmk_server__sshkeys.privatekey_file }}'
    dest: '{{ checkmk_server__site_home }}/.ssh/id_rsa'
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
    mode: '0600'
  when: checkmk_server__sshkeys|d() and
        "privatekey_file" in checkmk_server__sshkeys|d()

- name: Copy SSH public key
  copy:
    src: '{{ checkmk_server__sshkeys.publickey_file }}'
    dest: '{{ checkmk_server__site_home }}/.ssh/id_rsa.pub'
    owner: '{{ checkmk_server__user }}'
    group: '{{ checkmk_server__group }}'
    mode: '0644'
  when: checkmk_server__sshkeys|d() and
        "publickey_file" in checkmk_server__sshkeys|d()

- name: Read SSH public key
  command: 'cat {{ checkmk_server__site_home }}/.ssh/id_rsa.pub'
  changed_when: False
  ignore_errors: '{{ ansible_check_mode }}'
  register: checkmk_server__register_ssh_public_key
  when: checkmk_server__sshkeys|d()
